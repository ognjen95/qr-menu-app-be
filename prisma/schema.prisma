generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CustomerTenant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  externalId  String    @unique
  email       String    @unique
  firstName   String
  middleName  String?
  lastName    String
  birthday    DateTime?
  createdAt   DateTime  @default(now())
  userRole    UserRoles
  nationality String?
  phone       String?
  tenantId    String    @db.ObjectId
}

type Location {
  address String?
  city    String?
  country String?
  state   String?
}

type MenuItemVariant {
  name        String
  description String?
  price       Float
}

model MenuSection {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  menu   Menu?   @relation(fields: [menuId], references: [id])
  menuId String? @db.ObjectId

  menuItems   MenuItem[]
  menuItemIds String[]
}

model MenuItem {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  variants    MenuItemVariant[]
  alergens    String[]
  tags        String[]
  image       String?
  isAvailable Boolean           @default(true)
  section     MenuSection?      @relation(fields: [sectionId], references: [id])
  sectionId   String?           @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Menu {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  restaurants Restaurant[]

  tenantId String? @db.ObjectId

  isVisible Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  menuSection    MenuSection[]
  menuSectionIds String[]
}

model Rating {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  meal        Int
  service     Int
  cleanliness Int
  price       Int
  atmosphere  Int
  comment     String?

  createdAt DateTime @default(now())

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
}

model Restaurant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  location    Location?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  image       String?

  ratings Rating[]

  tenantId String? @db.ObjectId

  menu   Menu?   @relation(fields: [menuId], references: [id])
  menuId String? @db.ObjectId
}

model TaskComment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  created     DateTime @default(now())
  authorId    String
  authorName  String
  authorImage String
  Task        Task?    @relation(fields: [taskId], references: [id])
  taskId      String?  @db.ObjectId
}

enum TaskType {
  TASK
  REMINDER
  EVENT
  CASE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  BLOCKED
  IN_REVIEW
  COMPLETED
}

model Task {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  taskStatus  TaskStatus   @default(TO_DO)
  taskType    TaskType     @default(REMINDER)
  priority    TaskPriority @default(LOW)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  createdById   String
  createdByName String

  caseId   String?
  caseName String?

  assigneesIds String[] @db.ObjectId

  comments TaskComment[]
}

enum UserRoles {
  ADMIN
  SUPER_ADMIN
  CUSTOMER_OWNER
  CUSTOMER_EMPLOYEE
  VISITOR_CLIENT
}

type ThemeSectionComponent {
  title String
  type  ComponentType
  style Style?
  props Props?
}

model ThemeSection {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  title       String                  @unique
  description String
  style       Style?
  props       Props?
  components  ThemeSectionComponent[]
  page        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

type ThemeSectionConfig {
  id          String
  title       String
  description String
  style       Style?
  props       Props?
  components  ThemeSectionComponent[]
  page        String?

  createdAt DateTime
  updatedAt DateTime
}

model ThemeConfig {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  activePages  String[]
  colorPallete ColorPallete
  typography   ThemeTypography
  logo         Logo
  navigation   Navigation
  footer       Footer
  buttons      Buttons
  cards        Cards
  background   ThemeBackground
  sections     ThemeSectionConfig[]
  animation    Animation

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  tenantId String? @db.ObjectId
}

type Animation {
  duration  String
  timing    String?
  delay     String?
  iteration String?
  type      String?
}

type ThemeBackground {
  color String
  image String
}

enum NavigationLayout {
  SPACE_BETWEEN
  LEFT
  RIGHT
  CENTER
  STACKED
}

enum FooterLayout {
  HORIZONTAL
  VERTICAL
}

enum ComponentType {
  DIV
  BUTTON
  INPUT
  TEXT
  IMAGE
  LOGO
  NAVIGATION
  FOOTER
  SECTION
  SECTION_TITLE
  CARD
  MODAL
  TOAST
  LOADER
  FORM
  TABLE
  LIST
  GRID
  MAP
  CHART
  CALENDAR
  TIMER
  H1
  H2
  H3
  H4
  H5
  H6
  P
  SPAN
  LINK
  ICON
  SVG
  VIDEO
}

type Style {
  padding         String?
  margin          String?
  color           String?
  backgroundColor String?
  background      String?
  border          String?
  borderRadius    String?
  fontSize        String?
  fontWeight      String?
  textAlign       String?
  display         String?
  flexDirection   String?
  justifyContent  String?
  alignItems      String?
  flexWrap        String?
  flex            String?
  width           String?
  height          String?
  position        String?
  top             String?
  right           String?
  bottom          String?
  left            String?
  zIndex          String?
  boxShadow       String?
  overflow        String?
  transform       String?
}

type Props {
  className   String?
  id          String?
  onClick     String?
  src         String?
  alt         String?
  type        String?
  value       String?
  placeholder String?
  name        String?
}

type ColorPallete {
  primary    String
  secondary  String
  tertiary   String
  text       String
  headers    String
  background String
  surface    String
  cards      String
}

type Text {
  fontSize   String?
  fontFamily String?
  color      String?
  weight     String?
}

enum TypographySize {
  SMALL
  MEDIUM
  LARGE
}

type ThemeTypography {
  fontSize TypographySize
  headers  Text
  text     Text
}

type Logo {
  url String
}

type Navigation {
  layout                NavigationLayout
  backgroundColor       String
  navigationLinksColors String
  fontSize              String
  fontWeight            String
}

type Footer {
  layout          FooterLayout
  backgroundColor String
  color           String
  fontSize        String
  fontWeight      String
}

type Buttons {
  borderRadius String
  buttonHover  Boolean    @default(true)
  buttonType   ButtonType
  buttonSize   ButtonSize
}

type Cards {
  backgroundColor String?
  borderRadius    String?
}

enum ButtonType {
  FILLED
  OUTLINED
  TEXT
}

enum ButtonSize {
  SMALL
  MEDIUM
  LARGE
}
