# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Animation {
  delay: String!
  duration: String!
  iteration: String!
  timing: String!
  type: String!
}

input AnimationInput {
  delay: String!
  duration: String!
  iteration: String!
  timing: String!
  type: String!
}

input ApplicantsIdsInput {
  hasSome: String!
}

type AuthReturn {
  accessToken: String!
  idToken: String!
  refreshToken: String!
}

type Buttons {
  borderRadius: String!
}

input ButtonsInput {
  borderRadius: String!
}

type Cards {
  backgroundColor: String!
  borderRadius: String!
}

input CardsInput {
  backgroundColor: String!
  borderRadius: String!
}

type Chat {
  token: String!
  userId: String!
}

type ColorPallete {
  background: String!
  cards: String!
  headers: String!
  primary: String!
  secondary: String!
  surface: String!
  tertiary: String!
  text: String!
}

input ColorPalleteInput {
  background: String!
  cards: String!
  headers: String!
  primary: String!
  secondary: String!
  surface: String!
  tertiary: String!
  text: String!
}

enum ComponentType {
  BUTTON
  CALENDAR
  CARD
  CHART
  DIV
  FOOTER
  FORM
  GRID
  H1
  H2
  H3
  H4
  H5
  H6
  ICON
  IMAGE
  INPUT
  LINK
  LIST
  LOADER
  LOGO
  MAP
  MODAL
  NAVIGATION
  P
  SECTION
  SECTION_TITLE
  SPAN
  SVG
  TABLE
  TEXT
  TIMER
  TOAST
  VIDEO
}

input CreateCustomerTentantInput {
  birthday: DateTime
  email: String!
  firstName: String!
  lastName: String!
  middleName: String
  name: String!
  nationality: String
  password: String!
  phone: String
  tenantId: String
  userRole: UserRoles
}

input CreateMenuInput {
  description: String
  isVisible: Boolean
  name: String!
}

input CreateMenuItemInput {
  alergens: [String!]
  description: String
  image: String
  isAvailable: Boolean
  menuId: String!
  menuItemsIds: [String!]
  menuSectionId: String!
  name: String!
  tags: [String!]
  variants: [MenuItemVariantInput!]!
}

input CreateMenuSectionInput {
  description: String
  menuId: String
  menuSectionsIds: [String!]! = []
  name: String!
  positionIndex: Int!
}

input CreateRestaurantInput {
  description: String
  image: String
  location: LocationInput
  menuId: String
  name: String!
}

input CreateTaskInput {
  assigneeIds: [String!]
  caseId: String
  description: String
  endDate: DateTime!
  id: String
  name: String!
  priority: TaskPriority!
  startDate: DateTime!
  status: TaskStatus!
  type: TaskType!
}

input CreateThemeConfigurationInput {
  animation: AnimationInput
  background: ThemeBackgroundInput
  buttons: ButtonsInput
  cards: CardsInput
  colorPallete: ColorPalleteInput
  footer: FooterInput
  logo: LogoInput
  navigation: NavigationInput
  sections: [ThemeSectionEntityInput!] = []
  title: String!
  typography: ThemeTypographyInput
}

input CreateThemeSectionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateUserInput {
  birthday: DateTime
  email: String!
  firstName: String!
  lastName: String!
  middleName: String
  nationality: String
  password: String!
  phone: String
  tenantId: String
  userRole: UserRoles
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Footer {
  backgroundColor: String!
  color: String!
  fontSize: String!
  fontWeight: String!
  layout: FooterLayout!
}

input FooterInput {
  backgroundColor: String!
  color: String!
  fontSize: String!
  fontWeight: String!
  layout: FooterLayout!
}

enum FooterLayout {
  HORIZONTAL
  VERTICAL
}

type LocationEntity {
  address: String
  city: String
  country: String
  state: String
}

input LocationInput {
  address: String
  city: String
  country: String
  state: String
}

type Logo {
  url: String!
}

input LogoInput {
  url: String!
}

type MenuConnection {
  edges: [MenuEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MenuEdges {
  cursor: String!
  node: MenuEntity!
}

type MenuEntity {
  createdAt: DateTime!
  description: String
  id: String!
  isVisible: Boolean!
  menuSectionIds: [String!]!
  menuSections(options: MenuSectionsOptionsInput): MenuSectionConnection!
  name: String!
  restaurants: [RestaurantEntity!]
  tenantId: String!
  updatedAt: DateTime!
}

input MenuIdInput {
  equals: String
  in: [String!]
}

type MenuItemEntity {
  alergens: [String!]!
  createdAt: DateTime!
  description: String
  id: String!
  image: String
  isAvailable: Boolean!
  menu: MenuEntity
  name: String!
  sectionId: String!
  tags: [String!]!
  updatedAt: DateTime!
  variants: [MenuItemVariant!]!
}

input MenuItemIdInput {
  equals: String
  in: [String!]
}

input MenuItemOptionsInput {
  where: MenuItemWhere
}

type MenuItemVariant {
  name: String!
  price: Float!
}

input MenuItemVariantInput {
  name: String!
  price: Float!
}

input MenuItemWhere {
  id: MenuItemIdInput
  sectionId: String
}

type MenuItemsConnection {
  edges: [MenuItemsEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MenuItemsEdges {
  cursor: String!
  node: MenuItemEntity!
}

input MenuOptionsInput {
  where: MenuWhere
}

type MenuSectionConnection {
  edges: [MenuSectionEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MenuSectionEdges {
  cursor: String!
  node: MenuSectionEntity!
}

type MenuSectionEntity {
  createdAt: DateTime!
  description: String
  id: String!
  isVisible: Boolean!
  menuId: String!
  menuItemIds: [String!]!
  menuItems(options: MenuItemOptionsInput): MenuItemsConnection!
  name: String!
  updatedAt: DateTime!
}

input MenuSectionsIdInput {
  equals: String
  in: [String!]
}

input MenuSectionsOptionsInput {
  where: MenuSectionsWhere = {}
}

input MenuSectionsWhere {
  id: MenuSectionsIdInput
  menuId: String
}

input MenuWhere {
  id: MenuIdInput
  tenantId: String
}

type Mutation {
  createChat(chatName: String!, userIds: [String!]!): String!
  createCustomerBusiness(args: CreateCustomerTentantInput!): String!
  createMenu(createMenuInput: CreateMenuInput!): String!
  createMenuItem(args: CreateMenuItemInput!): String!
  createMenuSection(createMenuSectionInput: CreateMenuSectionInput!): String!
  createRestaurant(args: CreateRestaurantInput!): String!
  createTask(createTaskInput: CreateTaskInput!): TaskEntity!
  createThemeConfiguration(args: CreateThemeConfigurationInput!): String!
  createThemeSection(createThemeSectionInput: CreateThemeSectionInput!): ThemeSectionEntity!
  createUser(args: CreateUserInput!): String!
  deleteMenu(id: String!): String!
  deleteMenuItem(id: String!): String!
  deleteMenuSection(id: String!): String!
  deleteRestaurant(id: String!): String!
  login(email: String!, password: String!): AuthReturn!
  removeThemeSection(id: Int!): ThemeSectionEntity!
  removeUser(id: String!): UserEntity!
  updateMenu(args: UpdateMenuInput!): String!
  updateMenuItem(args: UpdateMenuItemInput!): String!
  updateMenuSection(args: UpdateMenuSectionInput!): String!
  updateRestaurant(args: UpdateRestaurantInput!): String!
  updateThemeSection(updateThemeSectionInput: UpdateThemeSectionInput!): ThemeSectionEntity!
  updateUser(args: UpdateUserInput!): UserEntity!
}

type Navigation {
  backgroundColor: String!
  fontSize: String!
  fontWeight: String!
  layout: NavigationLayout!
  navigationLinksColors: String!
}

input NavigationInput {
  backgroundColor: String!
  fontSize: String!
  fontWeight: String!
  layout: NavigationLayout!
  navigationLinksColors: String!
}

enum NavigationLayout {
  CENTER
  LEFT
  RIGHT
  SPACE_BETWEEN
  STACKED
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PresignedUrlReturn {
  id: String!
  link: String!
}

type Props {
  alt: String
  className: String
  id: String
  name: String
  onClick: String
  placeholder: String
  src: String
  type: String
  value: String
}

input PropsInput {
  alt: String
  className: String
  id: String
  name: String
  onClick: String
  placeholder: String
  src: String
  type: String
  value: String
}

type Query {
  chatAccessToken: Chat!
  findThemeById(id: String!): ThemeConfigurationEntity!
  menu(options: MenuOptionsInput): MenuEntity!
  menuItem: [MenuItemEntity!]!
  menus(options: MenuOptionsInput): MenuConnection!
  presignedUrl(fileNames: [String!]!): [PresignedUrlReturn]!
  publicMenu(options: MenuOptionsInput): MenuEntity!
  restaurants(options: RestaurantOptionsInput): RestaurantConnection!
  tasks(options: TaskQueryOptionsInput): TaskConnection!
  themeSection(id: Int!): ThemeSectionEntity!
  userById(id: String!): UserEntity!
  users(args: UserQueryOptionsInput): UserConnection!
}

type RestaurantConnection {
  edges: [RestaurantEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type RestaurantEdges {
  cursor: String!
  node: RestaurantEntity!
}

type RestaurantEntity {
  createdAt: DateTime!
  description: String
  id: String!
  image: String
  location: LocationEntity
  menuId: String
  name: String!
  tenantId: String!
  updatedAt: DateTime!
}

input RestaurantIdInput {
  equals: String
  in: [String!]
}

input RestaurantOptionsInput {
  where: RestaurantWhere
}

input RestaurantWhere {
  id: RestaurantIdInput
  tenantId: String
}

type Style {
  alignItems: String
  background: String
  backgroundColor: String
  border: String
  borderRadius: String
  bottom: String
  boxShadow: String
  color: String
  display: String
  flex: String
  flexDirection: String
  flexWrap: String
  fontSize: String
  fontWeight: String
  height: String
  justifyContent: String
  left: String
  margin: String
  overflow: String
  padding: String
  position: String
  right: String
  textAlign: String
  top: String
  transform: String
  width: String
  zIndex: String
}

input StyleInput {
  alignItems: String
  background: String
  backgroundColor: String
  border: String
  borderRadius: String
  bottom: String
  boxShadow: String
  color: String
  display: String
  flex: String
  flexDirection: String
  flexWrap: String
  fontSize: String
  fontWeight: String
  height: String
  justifyContent: String
  left: String
  margin: String
  overflow: String
  padding: String
  position: String
  right: String
  textAlign: String
  top: String
  transform: String
  width: String
  zIndex: String
}

type TaskConnection {
  edges: [TaskEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TaskEdges {
  cursor: String!
  node: TaskEntity!
}

type TaskEntity {
  assignees: [UserEntity!]
  assigneesIds: [String!]
  caseId: String
  caseName: String
  createdById: String!
  createdByName: String!
  description: String
  endDate: DateTime!
  id: String!
  name: String!
  priority: TaskPriority!
  startDate: DateTime!
  taskStatus: TaskStatus!
  taskType: TaskType!
}

"""Priority of the task"""
enum TaskPriority {
  HIGH
  LOW
  MEDIUM
}

input TaskQueryOptionsInput {
  assigneeIds: [String!]
  caseId: String
  description: String
  endDate: DateTime
  id: String
  name: String
  priority: TaskPriority
  startDate: DateTime
  status: TaskStatus
  type: TaskType
}

"""Status of the task"""
enum TaskStatus {
  BLOCKED
  COMPLETED
  IN_PROGRESS
  IN_REVIEW
  TO_DO
}

"""Type of the task"""
enum TaskType {
  CASE
  EVENT
  REMINDER
  TASK
}

type Text {
  color: String
  fontFamily: String
  fontSize: String
  weight: String
}

input TextInput {
  color: String
  fontFamily: String
  fontSize: String
  weight: String
}

type ThemeBackground {
  color: String!
  image: String!
}

input ThemeBackgroundInput {
  color: String!
  image: String!
}

type ThemeConfigurationEntity {
  animation: Animation!
  background: ThemeBackground!
  buttons: Buttons!
  cards: Cards!
  colorPallete: ColorPallete!
  createdAt: DateTime!
  footer: Footer!
  id: String!
  logo: Logo!
  navigation: Navigation!
  sections: [ThemeSectionEntity!]!
  title: String!
  typography: ThemeTypography!
  updatedAt: DateTime!
}

type ThemeSectionComponent {
  props: Props
  style: Style
  title: String!
  type: ComponentType!
}

input ThemeSectionComponentInput {
  props: PropsInput
  style: StyleInput
  title: String!
  type: ComponentType!
}

type ThemeSectionEntity {
  components: [ThemeSectionComponent!]
  description: String!
  id: String!
  props: Props
  style: Style
  title: String!
}

input ThemeSectionEntityInput {
  components: [ThemeSectionComponentInput!] = []
  description: String!
  id: String!
  props: PropsInput
  style: StyleInput
  title: String!
}

type ThemeTypography {
  fontSize: TypographySize!
  headers: Text!
  text: Text!
}

input ThemeTypographyInput {
  fontSize: TypographySize!
  headers: TextInput!
  text: TextInput!
}

enum TypographySize {
  LARGE
  MEDIUM
  SMALL
}

input UpdateMenuInput {
  description: String
  id: String!
  isVisible: Boolean
  menuSectionIds: [String!]
  name: String
}

input UpdateMenuItemInput {
  alergens: [String!]
  description: String
  id: String!
  image: String
  isAvailable: Boolean
  menuId: String
  menuItemsIds: [String!]
  menuSectionId: String
  name: String
  tags: [String!]
  variants: [MenuItemVariantInput!]
}

input UpdateMenuSectionInput {
  description: String
  id: String!
  menuId: String
  menuItemIds: [String!]
  menuSectionsIds: [String!] = []
  name: String
  positionIndex: Int
}

input UpdateRestaurantInput {
  description: String
  id: String!
  image: String
  location: LocationInput
  menuId: String
  name: String
}

input UpdateThemeSectionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  birthday: DateTime
  email: String
  firstName: String
  id: String!
  lastName: String
  middleName: String
  nationality: String
  password: String
  phone: String
  tenantId: String
  userRole: UserRoles
}

type UserConnection {
  edges: [UserEdges!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdges {
  cursor: String!
  node: UserEntity!
}

type UserEntity {
  birthday: DateTime
  createdAt: DateTime!
  email: String!
  externalId: String!
  firstName: String!
  id: String!
  lastName: String!
  middleName: String
  nationality: String
  phone: String
  tenantId: String
  userRole: UserRoles!
}

input UserQueryOptionsInput {
  where: UserWhereInput
}

enum UserRoles {
  ADMIN
  CUSTOMER_EMPLOYEE
  CUSTOMER_OWNER
  SUPER_ADMIN
  VISITOR_CLIENT
}

input UserWhereInput {
  applicationId: ApplicantsIdsInput!
}